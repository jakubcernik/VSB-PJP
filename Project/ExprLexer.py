# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,5,5,
        71,8,5,10,5,12,5,74,9,5,1,6,4,6,77,8,6,11,6,12,6,78,1,7,4,7,82,8,
        7,11,7,12,7,83,1,7,1,7,4,7,88,8,7,11,7,12,7,89,1,8,1,8,5,8,94,8,
        8,10,8,12,8,97,9,8,1,8,1,8,1,9,4,9,102,8,9,11,9,12,9,103,1,9,1,9,
        1,10,1,10,1,10,1,10,5,10,112,8,10,10,10,12,10,115,9,10,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,95,0,23,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,
        5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        3,0,9,10,13,13,32,32,2,0,10,10,13,13,161,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,53,1,0,0,0,7,59,1,0,0,0,9,
        66,1,0,0,0,11,68,1,0,0,0,13,76,1,0,0,0,15,81,1,0,0,0,17,91,1,0,0,
        0,19,101,1,0,0,0,21,107,1,0,0,0,23,118,1,0,0,0,25,121,1,0,0,0,27,
        126,1,0,0,0,29,132,1,0,0,0,31,139,1,0,0,0,33,141,1,0,0,0,35,143,
        1,0,0,0,37,145,1,0,0,0,39,147,1,0,0,0,41,149,1,0,0,0,43,151,1,0,
        0,0,45,153,1,0,0,0,47,48,5,44,0,0,48,2,1,0,0,0,49,50,5,105,0,0,50,
        51,5,110,0,0,51,52,5,116,0,0,52,4,1,0,0,0,53,54,5,102,0,0,54,55,
        5,108,0,0,55,56,5,111,0,0,56,57,5,97,0,0,57,58,5,116,0,0,58,6,1,
        0,0,0,59,60,5,115,0,0,60,61,5,116,0,0,61,62,5,114,0,0,62,63,5,105,
        0,0,63,64,5,110,0,0,64,65,5,103,0,0,65,8,1,0,0,0,66,67,5,37,0,0,
        67,10,1,0,0,0,68,72,7,0,0,0,69,71,7,1,0,0,70,69,1,0,0,0,71,74,1,
        0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,12,1,0,0,0,74,72,1,0,0,0,75,
        77,7,2,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,
        0,79,14,1,0,0,0,80,82,7,2,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,
        1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,87,5,46,0,0,86,88,7,2,0,0,
        87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,16,1,
        0,0,0,91,95,5,34,0,0,92,94,9,0,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,
        96,1,0,0,0,95,93,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,99,5,34,
        0,0,99,18,1,0,0,0,100,102,7,3,0,0,101,100,1,0,0,0,102,103,1,0,0,
        0,103,101,1,0,0,0,103,104,1,0,0,0,104,105,1,0,0,0,105,106,6,9,0,
        0,106,20,1,0,0,0,107,108,5,47,0,0,108,109,5,47,0,0,109,113,1,0,0,
        0,110,112,8,4,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,
        0,113,114,1,0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,116,117,6,10,0,
        0,117,22,1,0,0,0,118,119,5,105,0,0,119,120,5,102,0,0,120,24,1,0,
        0,0,121,122,5,101,0,0,122,123,5,108,0,0,123,124,5,115,0,0,124,125,
        5,101,0,0,125,26,1,0,0,0,126,127,5,119,0,0,127,128,5,104,0,0,128,
        129,5,105,0,0,129,130,5,108,0,0,130,131,5,101,0,0,131,28,1,0,0,0,
        132,133,5,114,0,0,133,134,5,101,0,0,134,135,5,116,0,0,135,136,5,
        117,0,0,136,137,5,114,0,0,137,138,5,110,0,0,138,30,1,0,0,0,139,140,
        5,43,0,0,140,32,1,0,0,0,141,142,5,45,0,0,142,34,1,0,0,0,143,144,
        5,42,0,0,144,36,1,0,0,0,145,146,5,47,0,0,146,38,1,0,0,0,147,148,
        5,61,0,0,148,40,1,0,0,0,149,150,5,59,0,0,150,42,1,0,0,0,151,152,
        5,40,0,0,152,44,1,0,0,0,153,154,5,41,0,0,154,46,1,0,0,0,8,0,72,78,
        83,89,95,103,113,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    ID = 6
    INT = 7
    FLOAT = 8
    STRING = 9
    WS = 10
    COMMENT = 11
    IF = 12
    ELSE = 13
    WHILE = 14
    RETURN = 15
    PLUS = 16
    MINUS = 17
    MUL = 18
    DIV = 19
    ASSIGN = 20
    SEMI = 21
    LPAREN = 22
    RPAREN = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'int'", "'float'", "'string'", "'%'", "'if'", "'else'", 
            "'while'", "'return'", "'+'", "'-'", "'*'", "'/'", "'='", "';'", 
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "WS", "COMMENT", "IF", "ELSE", 
            "WHILE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", 
            "SEMI", "LPAREN", "RPAREN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "ID", "INT", "FLOAT", 
                  "STRING", "WS", "COMMENT", "IF", "ELSE", "WHILE", "RETURN", 
                  "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "SEMI", "LPAREN", 
                  "RPAREN" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


