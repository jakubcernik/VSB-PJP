# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,177,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,87,8,6,1,7,1,7,5,7,91,8,7,10,7,12,7,94,9,7,1,8,4,8,97,8,8,11,
        8,12,8,98,1,9,4,9,102,8,9,11,9,12,9,103,1,9,1,9,4,9,108,8,9,11,9,
        12,9,109,1,10,1,10,1,10,1,10,5,10,116,8,10,10,10,12,10,119,9,10,
        1,10,1,10,1,11,4,11,124,8,11,11,11,12,11,125,1,11,1,11,1,12,1,12,
        1,12,1,12,5,12,134,8,12,10,12,12,12,137,9,12,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,0,0,25,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,
        6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,185,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,
        3,53,1,0,0,0,5,57,1,0,0,0,7,63,1,0,0,0,9,70,1,0,0,0,11,75,1,0,0,
        0,13,86,1,0,0,0,15,88,1,0,0,0,17,96,1,0,0,0,19,101,1,0,0,0,21,111,
        1,0,0,0,23,123,1,0,0,0,25,129,1,0,0,0,27,140,1,0,0,0,29,143,1,0,
        0,0,31,148,1,0,0,0,33,154,1,0,0,0,35,161,1,0,0,0,37,163,1,0,0,0,
        39,165,1,0,0,0,41,167,1,0,0,0,43,169,1,0,0,0,45,171,1,0,0,0,47,173,
        1,0,0,0,49,175,1,0,0,0,51,52,5,44,0,0,52,2,1,0,0,0,53,54,5,105,0,
        0,54,55,5,110,0,0,55,56,5,116,0,0,56,4,1,0,0,0,57,58,5,102,0,0,58,
        59,5,108,0,0,59,60,5,111,0,0,60,61,5,97,0,0,61,62,5,116,0,0,62,6,
        1,0,0,0,63,64,5,115,0,0,64,65,5,116,0,0,65,66,5,114,0,0,66,67,5,
        105,0,0,67,68,5,110,0,0,68,69,5,103,0,0,69,8,1,0,0,0,70,71,5,98,
        0,0,71,72,5,111,0,0,72,73,5,111,0,0,73,74,5,108,0,0,74,10,1,0,0,
        0,75,76,5,37,0,0,76,12,1,0,0,0,77,78,5,116,0,0,78,79,5,114,0,0,79,
        80,5,117,0,0,80,87,5,101,0,0,81,82,5,102,0,0,82,83,5,97,0,0,83,84,
        5,108,0,0,84,85,5,115,0,0,85,87,5,101,0,0,86,77,1,0,0,0,86,81,1,
        0,0,0,87,14,1,0,0,0,88,92,7,0,0,0,89,91,7,1,0,0,90,89,1,0,0,0,91,
        94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,16,1,0,0,0,94,92,1,0,0,
        0,95,97,7,2,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,
        1,0,0,0,99,18,1,0,0,0,100,102,7,2,0,0,101,100,1,0,0,0,102,103,1,
        0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,105,1,0,0,0,105,107,5,
        46,0,0,106,108,7,2,0,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,
        0,0,0,109,110,1,0,0,0,110,20,1,0,0,0,111,117,5,34,0,0,112,116,8,
        3,0,0,113,114,5,92,0,0,114,116,9,0,0,0,115,112,1,0,0,0,115,113,1,
        0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,
        0,0,0,119,117,1,0,0,0,120,121,5,34,0,0,121,22,1,0,0,0,122,124,7,
        4,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,126,1,
        0,0,0,126,127,1,0,0,0,127,128,6,11,0,0,128,24,1,0,0,0,129,130,5,
        47,0,0,130,131,5,47,0,0,131,135,1,0,0,0,132,134,8,5,0,0,133,132,
        1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,138,
        1,0,0,0,137,135,1,0,0,0,138,139,6,12,0,0,139,26,1,0,0,0,140,141,
        5,105,0,0,141,142,5,102,0,0,142,28,1,0,0,0,143,144,5,101,0,0,144,
        145,5,108,0,0,145,146,5,115,0,0,146,147,5,101,0,0,147,30,1,0,0,0,
        148,149,5,119,0,0,149,150,5,104,0,0,150,151,5,105,0,0,151,152,5,
        108,0,0,152,153,5,101,0,0,153,32,1,0,0,0,154,155,5,114,0,0,155,156,
        5,101,0,0,156,157,5,116,0,0,157,158,5,117,0,0,158,159,5,114,0,0,
        159,160,5,110,0,0,160,34,1,0,0,0,161,162,5,43,0,0,162,36,1,0,0,0,
        163,164,5,45,0,0,164,38,1,0,0,0,165,166,5,42,0,0,166,40,1,0,0,0,
        167,168,5,47,0,0,168,42,1,0,0,0,169,170,5,61,0,0,170,44,1,0,0,0,
        171,172,5,59,0,0,172,46,1,0,0,0,173,174,5,40,0,0,174,48,1,0,0,0,
        175,176,5,41,0,0,176,50,1,0,0,0,10,0,86,92,98,103,109,115,117,125,
        135,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    BOOL = 7
    ID = 8
    INT = 9
    FLOAT = 10
    STRING = 11
    WS = 12
    COMMENT = 13
    IF = 14
    ELSE = 15
    WHILE = 16
    RETURN = 17
    PLUS = 18
    MINUS = 19
    MUL = 20
    DIV = 21
    ASSIGN = 22
    SEMI = 23
    LPAREN = 24
    RPAREN = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'int'", "'float'", "'string'", "'bool'", "'%'", "'if'", 
            "'else'", "'while'", "'return'", "'+'", "'-'", "'*'", "'/'", 
            "'='", "';'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "ID", "INT", "FLOAT", "STRING", "WS", "COMMENT", "IF", 
            "ELSE", "WHILE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", 
            "SEMI", "LPAREN", "RPAREN" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "BOOL", 
                  "ID", "INT", "FLOAT", "STRING", "WS", "COMMENT", "IF", 
                  "ELSE", "WHILE", "RETURN", "PLUS", "MINUS", "MUL", "DIV", 
                  "ASSIGN", "SEMI", "LPAREN", "RPAREN" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


